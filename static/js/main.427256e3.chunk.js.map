{"version":3,"sources":["ui/templates/generic.tsx","pages/home/model.ts","pages/home/index.tsx","pages/routes.ts","pages/error404/index.tsx","pages/index.ts","application.tsx","service-worker.ts","index.tsx"],"names":["GenericTemplate","children","className","href","incrementClicked","createEvent","resetClicked","$counterValue","createStore","on","state","reset","ROUTES","path","exact","component","useStore","data-block","onClick","Pages","renderRoutes","Application","Boolean","window","location","hostname","match","ReactDOM","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wPAGaA,G,MAA4B,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACvC,gCACE,uBAAKC,UAAU,cACb,qBAAGC,KAAK,2BAAR,YACA,qBAAGA,KAAK,8BAAR,cACA,qBAAGA,KAAK,uDAAR,WAEF,4BAAOF,M,+BCPEG,EAAmBC,cACnBC,EAAeD,cAEfE,EAAgBC,YAAY,GAEzCD,EAAcE,GAAGL,GAAkB,SAAAM,GAAK,OAAIA,EAAQ,KAAGC,MAAML,GCHtD,ICFMM,EAAS,CACpB,CAAEC,KAAM,IAAKC,OAAO,EAAMC,UDCM,kBAChC,uBAAKb,UAAU,QACb,sCACA,4CAAoBc,YAAST,IAC7B,uBAAKU,aAAW,WACd,0BAAQC,QAASd,GAAjB,aACA,0BAAQc,QAASZ,GAAjB,aCNJ,CAAEO,KAAM,IAAKE,UCHuB,kBAAM,gDCE/BI,EAAkB,kBAAMC,YAAaR,ICErCS,EAAwB,kBACnC,gBAAC,IAAD,KACE,gBAAC,EAAD,KACE,gBAAC,EAAD,SCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,SAAgB,gBAAC,EAAD,MAAiBC,SAASC,cAAc,UDiIlD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.427256e3.chunk.js","sourcesContent":["import * as React from \"react\";\nimport \"./generic.css\";\n\nexport const GenericTemplate: React.FC = ({ children }) => (\n  <>\n    <nav className=\"navigation\">\n      <a href=\"https://effector.now.sh\">Effector</a>\n      <a href=\"https://share.effector.dev\">Playground</a>\n      <a href=\"https://github.com/sergeysova/cra-template-effector\">GitHub</a>\n    </nav>\n    <main>{children}</main>\n  </>\n);\n","import { MouseEvent } from \"react\";\nimport { createStore, createEvent } from \"effector\";\n\nexport const incrementClicked = createEvent<MouseEvent<HTMLButtonElement>>();\nexport const resetClicked = createEvent<MouseEvent<HTMLButtonElement>>();\n\nexport const $counterValue = createStore(0);\n\n$counterValue.on(incrementClicked, state => state + 1).reset(resetClicked);\n","import * as React from \"react\";\nimport { useStore } from \"effector-react\";\nimport \"./home.css\";\nimport { $counterValue, incrementClicked, resetClicked } from \"./model\";\n\nexport const HomePage: React.FC = () => (\n  <div className=\"hero\">\n    <h1>Effector</h1>\n    <h2>Counter value: {useStore($counterValue)}</h2>\n    <div data-block=\"buttons\">\n      <button onClick={incrementClicked}>Increment</button>\n      <button onClick={resetClicked}>Reset</button>\n    </div>\n  </div>\n);\n","import { HomePage } from \"./home\";\nimport { Error404Page } from \"./error404\";\n\nexport const ROUTES = [\n  { path: \"/\", exact: true, component: HomePage },\n  { path: \"*\", component: Error404Page }\n];\n","import * as React from \"react\";\n\nexport const Error404Page: React.FC = () => <div>Here not found</div>;\n","import * as React from \"react\";\nimport { renderRoutes } from \"react-router-config\";\nimport { ROUTES } from \"./routes\";\n\nexport const Pages: React.FC = () => renderRoutes(ROUTES);\n","import * as React from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport { GenericTemplate } from \"./ui\";\nimport { Pages } from \"./pages\";\n\nexport const Application: React.FC = () => (\n  <BrowserRouter>\n    <GenericTemplate>\n      <Pages />\n    </GenericTemplate>\n  </BrowserRouter>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport { Application } from \"./application\";\nimport * as serviceWorker from \"./service-worker\";\n\nReactDOM.render(<Application />, document.querySelector(\"#root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}