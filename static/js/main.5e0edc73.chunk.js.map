{"version":3,"sources":["ui/templates/generic.tsx","pages/home/model.ts","pages/home/history.ts","pages/home/index.tsx","pages/routes.ts","pages/error404/index.tsx","pages/index.ts","application.tsx","service-worker.ts","index.tsx"],"names":["GenericTemplate","children","className","href","LEVELS","easy","medium","hard","startClicked","createEvent","restartClicked","toMainMenuClicked","difficultyClicked","tubeClicked","tubeSelected","filterMap","event","currentTarget","dataset","position","map","Number","parseInt","$difficulty","createStore","$state","$moves","$tubes","$selectedTubeIndex","$tubesWithSelected","combine","tubes","selected","index","balls","slice","complete","over","isFull","every","eachSame","$selectedBall","filter","_","tube","won","guard","source","isEmpty","forward","from","to","gameStarted","sample","clock","fn","diff","tubeSelectedWithTubes","clickedIndex","selectedIndex","selectedBall","clickedTube","ballMoved","ball","ballIsTaken","ballPutBack","shuffle","array","sort","Math","random","length","value","list","on","set","count","filled","empty","series","Array","fill","allBalls","concat","pop","generateNewTubes","reset","undoClicked","redoClicked","historyWrote","historyRestored","historyForward","$history","$currentPosition","$undoCount","pos","$redoCount","history","target","nextPosition","$isWon","state","StartScreen","difficulty","useStore","Content","Title","Button","onClick","text","styled","div","h2","button","attrs","type","InPlay","isWon","useList","Moves","Container","WonScreen","moves","Won","UndoButton","RedoButton","Tube","TubeHolder","data-position","TubeTop","Ball","TubeGlass","color","key","colors","style","ROUTES","path","exact","component","Pages","renderRoutes","Application","Boolean","window","location","hostname","match","ReactDOM","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5e0edc73.chunk.js","sourcesContent":["import * as React from 'react';\nimport './generic.css';\n\nexport const GenericTemplate: React.FC = ({ children }) => (\n  <>\n    <main>{children}</main>\n    <nav className=\"navigation\">\n      <a href=\"https://effector.now.sh\">Effector</a>\n      <a href=\"https://github.com/sergeysova/ball.sova.dev\">Source Code</a>\n    </nav>\n  </>\n);\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { MouseEvent } from 'react';\nimport {\n  combine,\n  createEvent,\n  createStore,\n  forward,\n  guard,\n  sample,\n} from 'effector';\n\nexport interface Tube {\n  balls: BallColor[];\n}\n\nconst NO_SELECTED = -1;\n\nconst BALLS_IN_TUBE = 4;\nexport const LEVELS = {\n  easy: 5,\n  medium: 8,\n  hard: 12,\n};\n\nexport type BallColor =\n  | 0x0\n  | 0x1\n  | 0x2\n  | 0x3\n  | 0x4\n  | 0x5\n  | 0x6\n  | 0x7\n  | 0x8\n  | 0x9\n  | 0xa\n  | 0xb;\n\nexport const startClicked = createEvent<MouseEvent<HTMLButtonElement>>();\nexport const restartClicked = createEvent<MouseEvent<HTMLButtonElement>>();\nexport const toMainMenuClicked = createEvent<MouseEvent<HTMLButtonElement>>();\nexport const difficultyClicked = createEvent<keyof typeof LEVELS>();\n\nexport const tubeClicked = createEvent<MouseEvent<HTMLDivElement>>();\nconst tubeSelected = tubeClicked\n  .filterMap((event) => event.currentTarget.dataset.position)\n  .map((position) => Number.parseInt(position, 10));\n\nexport const $difficulty = createStore<keyof typeof LEVELS>('easy');\nexport const $state = createStore<'start' | 'ingame' | 'won'>('start');\nexport const $moves = createStore(0);\nexport const $tubes = createStore<Tube[]>([]);\nconst $selectedTubeIndex = createStore(NO_SELECTED);\n\nexport const $tubesWithSelected = combine(\n  $tubes,\n  $selectedTubeIndex,\n  (tubes, selected) =>\n    tubes.map(({ balls }, index) => {\n      if (selected === index) {\n        return {\n          balls: balls.slice(1),\n          complete: false,\n          over: balls[0],\n        };\n      }\n      return {\n        balls,\n        complete: isFull({ balls }) && balls.every(eachSame),\n        over: null,\n      };\n    }),\n);\n\nconst $selectedTube = combine(\n  $tubes,\n  $selectedTubeIndex,\n  (tubes, selected) =>\n    tubes.filter((_, index) => selected === index)[0] ?? null,\n);\n\nconst $selectedBall = $selectedTube.map(\n  (tube) => (tube ? tube.balls[0] : null) ?? null,\n);\n\nconst won = guard({\n  source: $tubes,\n  filter: checkWinner,\n});\n\nforward({\n  from: restartClicked,\n  to: startClicked,\n});\n\nexport const gameStarted = sample({\n  source: $difficulty,\n  clock: startClicked,\n  fn: (diff) => LEVELS[diff],\n});\n\nconst tubeSelectedWithTubes = sample({\n  source: [$tubes, $selectedTubeIndex, $selectedBall],\n  clock: tubeSelected,\n  fn: ([tubes, selectedIndex, selectedBall], clickedIndex) => ({\n    tubes,\n    // Already selected ball is over the tube\n    selectedIndex,\n    selectedBall,\n\n    // Just clicked\n    clickedIndex,\n    clickedTube: tubes[clickedIndex],\n  }),\n});\n\nexport const ballMoved = guard({\n  source: tubeSelectedWithTubes,\n  filter({ selectedIndex, clickedIndex, selectedBall, clickedTube }) {\n    if (selectedBall === null) return false;\n    if (selectedIndex === clickedIndex) return false;\n    if (isFull(clickedTube)) return false;\n\n    if (isEmpty(clickedTube)) {\n      return true;\n    }\n    if (isSameColor(clickedTube, selectedBall)) {\n      return true;\n    }\n    return false;\n  },\n});\n\nconst ballIsTaken = guard({\n  source: tubeSelectedWithTubes,\n  filter({ selectedBall, clickedTube }) {\n    if (selectedBall !== null) return false;\n    if (isEmpty(clickedTube)) return false;\n    return true;\n  },\n});\n\nconst ballPutBack = guard({\n  source: tubeSelectedWithTubes,\n  filter: ({ selectedIndex, clickedIndex }) => selectedIndex === clickedIndex,\n});\n\n$difficulty.on(difficultyClicked, (_, set) => set);\n\n$state\n  .on(gameStarted, () => 'ingame')\n  .on(won, () => 'won')\n  .on(toMainMenuClicked, () => 'start');\n$tubes.on(gameStarted, (_, count) => generateNewTubes(count));\n\n$moves.reset(gameStarted).on(ballMoved, (count) => count + 1);\n\n$selectedTubeIndex\n  .on(ballIsTaken, (_, { clickedIndex }) => clickedIndex)\n  .reset(ballPutBack, ballMoved, gameStarted);\n\n$tubes.on(\n  ballMoved,\n  (_, { tubes, clickedIndex, selectedIndex, selectedBall }) =>\n    tubes.map((tube, index) => {\n      if (index === selectedIndex) {\n        return { balls: tube.balls.slice(1) };\n      }\n      if (index === clickedIndex) {\n        return { balls: [selectedBall!, ...tube.balls] };\n      }\n      return tube;\n    }),\n);\n\nfunction generateNewTubes(filled: number, empty = 2): Tube[] {\n  const series = Array.from(\n    { length: filled },\n    (_, index) => new Array(BALLS_IN_TUBE).fill(index) as BallColor[],\n  );\n  const allBalls = shuffle(([] as BallColor[]).concat(...series));\n\n  return Array.from({ length: filled }, () =>\n    Array.from({ length: BALLS_IN_TUBE }, () => allBalls.pop()!),\n  )\n    .concat(Array.from({ length: empty }, () => []))\n    .map((balls) => ({ balls }));\n}\n\nfunction shuffle<T>(array: Array<T>): Array<T> {\n  return array.sort(() => Math.random() - 0.5);\n}\n\nfunction isEmpty(tube: Tube): boolean {\n  return tube.balls.length === 0;\n}\n\nfunction isFull(tube: Tube): boolean {\n  return tube.balls.length === BALLS_IN_TUBE;\n}\n\nfunction isSameColor(tube: Tube, ball: BallColor): boolean {\n  return tube.balls[0] === ball;\n}\n\nfunction eachSame(value: BallColor, index: number, list: BallColor[]): boolean {\n  return value === list[0];\n}\n\nfunction checkWinner(tubes: Tube[]): boolean {\n  for (const tube of tubes) {\n    if (!isEmpty(tube) && !isFull(tube)) {\n      return false;\n    }\n\n    if (!tube.balls.every(eachSame)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import { MouseEvent } from 'react';\nimport { createStore, createEvent, sample, combine } from 'effector';\nimport { gameStarted, ballMoved, $tubes, Tube } from './model';\n\ntype HistorySlice = Tube[];\n\nexport const undoClicked = createEvent<MouseEvent<HTMLButtonElement>>();\nexport const redoClicked = createEvent<MouseEvent<HTMLButtonElement>>();\nconst historyWrote = createEvent<HistorySlice>();\nconst historyRestored = createEvent<HistorySlice>();\nconst historyForward = createEvent<[number, HistorySlice]>();\n\nconst $history = createStore<HistorySlice[]>([]);\nconst $currentPosition = createStore(-1);\nexport const $undoCount = $currentPosition.map((pos) => (pos < 0 ? 0 : pos));\nexport const $redoCount = combine(\n  $history,\n  $currentPosition,\n  (history, position) => history.length - 1 - position,\n);\n\nsample({ source: $tubes, clock: gameStarted, target: historyWrote });\nsample({ source: $tubes, clock: ballMoved, target: historyWrote });\n\n$history.reset(gameStarted);\n\n$currentPosition\n  .reset(gameStarted)\n  .on(historyWrote, (position) => position + 1)\n  .on(historyForward, (_, [position]) => position)\n  .on(undoClicked, (position) => (position <= 1 ? 0 : position - 1));\n\nsample({\n  source: [$history, $currentPosition],\n  clock: historyWrote,\n  fn: ([history, position], slice) =>\n    history.slice(0, position).concat([slice]),\n  target: $history,\n});\n\nsample({\n  source: [$history, $currentPosition],\n  clock: redoClicked,\n  fn: ([history, position]) => {\n    const nextPosition = position + 1;\n    if (!history[nextPosition]) {\n      return [history.length - 1, history[history.length - 1]];\n    }\n    return [nextPosition, history[nextPosition]];\n  },\n  target: historyForward,\n});\n\nsample({\n  source: [$history, $currentPosition],\n  clock: undoClicked,\n  fn: ([history, position]) => history[position],\n  target: historyRestored,\n});\n\n$tubes\n  .on(historyRestored, (_, slice) => slice)\n  .on(historyForward, (_, [, slice]) => slice);\n","/* eslint-disable react/no-array-index-key */\nimport * as React from 'react';\nimport { useStore, useList } from 'effector-react';\nimport styled, { StyledComponent } from 'styled-components';\nimport {\n  $difficulty,\n  $moves,\n  $state,\n  $tubesWithSelected,\n  BallColor,\n  difficultyClicked,\n  restartClicked,\n  startClicked,\n  toMainMenuClicked,\n  tubeClicked,\n} from './model';\nimport { $undoCount, $redoCount, undoClicked, redoClicked } from './history';\n\nconst $isWon = $state.map((state) => state === 'won');\n\nexport const HomePage: React.FC = () => {\n  const state = useStore($state);\n\n  if (state === 'start') {\n    return <StartScreen />;\n  }\n\n  return <InPlay />;\n};\n\nconst StartScreen: React.FC = () => {\n  const difficulty = useStore($difficulty);\n\n  return (\n    <Content>\n      <Title>\n        LA<span>BALL</span>ATORY\n      </Title>\n      <fieldset>\n        <legend>Difficulty</legend>\n        <Button\n          selected={difficulty === 'easy'}\n          onClick={() => difficultyClicked('easy')}\n          text=\"Easy\"\n        />\n        <Button\n          selected={difficulty === 'medium'}\n          onClick={() => difficultyClicked('medium')}\n          text=\"Medium\"\n        />\n        <Button\n          selected={difficulty === 'hard'}\n          onClick={() => difficultyClicked('hard')}\n          text=\"Hard\"\n        />\n      </fieldset>\n      <br />\n      <Button onClick={startClicked} text=\"Start game\" />\n    </Content>\n  );\n};\n\nconst Content = styled.div`\n  display: flex;\n  flex-flow: column;\n  align-items: center;\n  align-content: center;\n  justify-content: center;\n`;\n\nconst Title = styled.h2`\n  font-size: 3rem;\n  font-weight: 300;\n\n  & span {\n    text-decoration: underline;\n  }\n`;\n\ninterface Button {\n  selected?: boolean;\n  text: React.ReactNode;\n}\n\nconst buttonMap = ({ selected, text }: Button) => ({\n  'data-selected': selected ?? false,\n  type: 'button',\n  children: text,\n});\n\nconst Button = styled.button.attrs(buttonMap)`\n  background-color: white;\n  color: black;\n  padding: 0.6rem 1rem;\n  font-size: 1.3rem;\n  margin: 0 0.2rem;\n  border: 2px solid lightgray;\n  cursor: pointer;\n  position: relative;\n\n  &:hover {\n    background-color: #f1f1f1;\n  }\n\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 0 4px lightblue;\n    border-color: lightblue;\n  }\n\n  &[data-selected='true'] {\n    border-color: gray;\n    background-color: gray;\n    color: white;\n  }\n`;\n\nexport const InPlay: React.FC = () => {\n  const isWon = useStore($isWon);\n\n  const tubes = useList($tubesWithSelected, (tube, position) => (\n    <Tube tube={tube} position={position} onClick={tubeClicked} />\n  ));\n\n  return (\n    <>\n      <div>\n        <Button onClick={toMainMenuClicked} text=\"←\" />\n        <Button onClick={restartClicked} text=\"Restart\" />\n        <Moves />\n        <UndoButton />\n        <RedoButton />\n      </div>\n      <Container>{tubes}</Container>\n      {isWon && <WonScreen />}\n    </>\n  );\n};\n\nconst WonScreen = () => {\n  const moves = useStore($moves);\n\n  return (\n    <Won>\n      <h2>You won!</h2>\n      <Button onClick={restartClicked} text=\"New game\" />\n      <Button onClick={toMainMenuClicked} text=\"Menu\" />\n      <h3>In {moves} moves</h3>\n    </Won>\n  );\n};\n\nconst UndoButton = () => {\n  const count = useStore($undoCount);\n\n  return (\n    <Button\n      onClick={undoClicked}\n      text={\n        <>\n          ↩<sup>{count}</sup>\n        </>\n      }\n    />\n  );\n};\n\nconst RedoButton = () => {\n  const count = useStore($redoCount);\n\n  return (\n    <Button\n      onClick={redoClicked}\n      text={\n        <>\n          <sup>{count}</sup>↪\n        </>\n      }\n    />\n  );\n};\n\nconst MovesContent: React.FC<{ className?: string }> = ({ className }) => {\n  const count = useStore($moves);\n\n  return <span className={className}>Moves: {count}</span>;\n};\n\nconst Moves = styled(MovesContent)`\n  color: black;\n  padding: 0.6rem 0.4rem;\n  font-size: 1.3rem;\n  margin: 0;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  max-width: 38rem;\n`;\n\nconst Won = styled.div`\n  display: flex;\n  flex-flow: column;\n  position: fixed;\n  bottom: 0;\n  top: 0;\n  left: 0;\n  right: 0;\n  background-color: rgba(255, 255, 255, 0.6);\n  backdrop-filter: blur(6px);\n  align-items: center;\n  padding-top: 5rem;\n\n  & > * + * {\n    margin-top: 1rem;\n  }\n`;\n\ntype TubeProps = {\n  tube: {\n    balls: Array<BallColor>;\n    over: BallColor | null;\n    complete: boolean;\n  };\n  position: number;\n  onClick: React.EventHandler<React.MouseEvent<HTMLDivElement>>;\n};\n\nconst Tube: React.FC<TubeProps> = ({ tube, position, onClick }) => (\n  <TubeHolder onClick={onClick} data-position={position}>\n    <TubeTop>{tube.over !== null ? <Ball ball={tube.over} /> : null}</TubeTop>\n    <TubeGlass complete={tube.complete}>\n      {tube.balls.map((color, index) => (\n        <Ball key={index} ball={color} />\n      ))}\n    </TubeGlass>\n  </TubeHolder>\n);\n\nconst TubeHolder = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 1rem;\n`;\n\nconst TubeTop = styled.div`\n  display: flex;\n  height: 3rem;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  border-bottom: 4px solid lightgray;\n`;\n\ntype Styled<T extends object> = StyledComponent<'div', T, T>;\n\ninterface Glass {\n  complete: boolean;\n}\n\nconst glassMap = ({ complete }: Glass) => ({\n  'data-complete': complete,\n});\n\nconst TubeGlass: Styled<Glass> = styled.div.attrs(glassMap)`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n  flex-shrink: 0;\n  align-items: center;\n  border: 2px solid lightgray;\n  border-top: none;\n  width: 3rem;\n  height: 10rem;\n  padding-bottom: 0.4rem;\n  padding-top: 0.4rem;\n  border-bottom-left-radius: 2.4rem;\n  border-bottom-right-radius: 2.4rem;\n\n  &[data-complete='true'] {\n    background-color: lightgray;\n  }\n`;\n\ninterface BallProps {\n  ball: BallColor;\n}\n\nconst colors = [\n  'blue',\n  'red',\n  'yellow',\n  'lime',\n  'purple',\n  'orange',\n  'pink',\n  'brown',\n  'lightblue',\n  'gray',\n  'cyan',\n  'darkgreen',\n];\n\nconst ballMap = ({ ball }: BallProps) => ({\n  style: { '--ball-color': colors[ball] },\n});\n\nconst Ball: Styled<BallProps> = styled.div.attrs(ballMap)`\n  width: 2rem;\n  height: 2rem;\n  border-radius: 50%;\n  border: 2px solid lightgray;\n  background-color: var(--ball-color);\n  margin: 1px;\n  flex-shrink: 0;\n`;\n","import { HomePage } from './home';\nimport { Error404Page } from './error404';\n\nexport const ROUTES = [\n  { path: '/', exact: true, component: HomePage },\n  { path: '*', component: Error404Page },\n];\n","import * as React from 'react';\n\nexport const Error404Page: React.FC = () => <div>Here not found</div>;\n","import * as React from 'react';\nimport { renderRoutes } from 'react-router-config';\nimport { ROUTES } from './routes';\n\nexport const Pages: React.FC = () => renderRoutes(ROUTES);\n","import * as React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport { GenericTemplate } from './ui';\nimport { Pages } from './pages';\n\nexport const Application: React.FC = () => (\n  <BrowserRouter>\n    <GenericTemplate>\n      <Pages />\n    </GenericTemplate>\n  </BrowserRouter>\n);\n","/* eslint-disable unicorn/regex-shorthand, no-console, no-param-reassign, unicorn/prefer-includes */\n/* eslint-disable unicorn/no-null, no-magic-numbers, unicorn/better-regex */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport './index.css';\nimport { Application } from './application';\nimport * as serviceWorker from './service-worker';\n\nReactDOM.render(<Application />, document.querySelector('#root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}